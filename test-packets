#!/usr/bin/env python3
"""
WATR Packet Test Coordinator

Easy-to-use command for testing packet transmission between devices.
"""

import sys
import os
import subprocess
import json
import time
from pathlib import Path

# Add python directory to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'python'))

def check_requirements():
    """Check if all requirements are met"""
    errors = []
    
    # Check if bootstrap config exists
    if not Path('/tmp/watr_adapters.json').exists():
        errors.append("Bootstrap configuration not found. Run: python bootstrap.py")
    
    # Check if scapy is available
    try:
        import scapy
    except ImportError:
        errors.append("Scapy not available. Install with: pip install scapy")
    
    # Check if we have a monitor-capable adapter
    try:
        with open('/tmp/watr_adapters.json', 'r') as f:
            config = json.load(f)
            
        monitor_adapters = [a for a in config.get('wifi_adapters', []) if a.get('supports_monitor', False)]
        if not monitor_adapters:
            errors.append("No monitor-capable WiFi adapter found")
    except:
        errors.append("Could not read adapter configuration")
    
    # Check if running as root for packet injection
    if os.geteuid() != 0:
        errors.append("Root privileges required for packet injection. Run with sudo.")
    
    return errors

def print_usage():
    """Print usage information"""
    print("""
🚀 WATR Packet Test Coordinator

Usage:
  sudo ./test-packets send    - Send test packets (requires root)
  sudo ./test-packets receive - Receive test packets (requires root)
  ./test-packets status       - Show adapter status

Examples:
  # Device 1 (sender)
  sudo ./test-packets send

  # Device 2 (receiver)  
  sudo ./test-packets receive

  # Custom parameters
  sudo ./test-packets send --channel 11 --count 5 --payload "Custom message"
  sudo ./test-packets receive --channel 11

Options:
  --channel N      WiFi channel (default: 6)
  --count N        Number of packets (send mode, default: 10)
  --interval N     Seconds between packets (send mode, default: 1.0)
  --payload TEXT   Custom payload message (send mode)
  --interface IF   WiFi interface (auto-detected)

Multi-device test procedure:
1. Run bootstrap on both devices: python bootstrap.py
2. Start receiver on device 1: sudo ./test-packets receive
3. Start sender on device 2: sudo ./test-packets send
4. Check results on both devices
""")

def run_bootstrap():
    """Run bootstrap to detect adapters"""
    print("🔍 Running adapter bootstrap...")
    try:
        result = subprocess.run([sys.executable, "bootstrap.py"], 
                              capture_output=True, text=True, cwd=os.path.dirname(__file__))
        if result.returncode == 0:
            print("✓ Bootstrap completed successfully")
            return True
        else:
            print(f"❌ Bootstrap failed: {result.stderr}")
            return False
    except Exception as e:
        print(f"❌ Error running bootstrap: {e}")
        return False

def show_status():
    """Show current adapter status"""
    try:
        with open('/tmp/watr_adapters.json', 'r') as f:
            config = json.load(f)
        
        print("\n📡 WATR ADAPTER STATUS")
        print("=" * 50)
        
        wifi_adapters = config.get('wifi_adapters', [])
        print(f"\n🔌 WiFi Adapters ({len(wifi_adapters)} found):")
        
        monitor_adapter = None
        for adapter in wifi_adapters:
            status = "🟢" if adapter.get('supports_monitor', False) else "🔴"
            hw_type = "📟" if adapter.get('is_onboard', False) else "🔌"
            
            print(f"  {status} {hw_type} {adapter['interface']} ({adapter['phy']})")
            print(f"      Driver: {adapter['driver']}")
            print(f"      Monitor: {'YES' if adapter.get('supports_monitor', False) else 'NO'}")
            
            if adapter.get('supports_monitor', False):
                monitor_adapter = adapter
        
        if monitor_adapter:
            print(f"\n🎯 Ready for testing with {monitor_adapter['interface']}")
        else:
            print(f"\n⚠️  No monitor-capable adapter found")
            
        print("\n" + "=" * 50)
        
    except Exception as e:
        print(f"❌ Error reading adapter status: {e}")

def main():
    """Main function"""
    if len(sys.argv) < 2:
        print_usage()
        return 1
    
    command = sys.argv[1]
    
    if command == "status":
        show_status()
        return 0
    
    if command == "bootstrap":
        success = run_bootstrap()
        return 0 if success else 1
    
    if command not in ["send", "receive"]:
        print(f"❌ Unknown command: {command}")
        print_usage()
        return 1
    
    # Check requirements
    print("🔍 Checking requirements...")
    errors = check_requirements()
    if errors:
        print("❌ Requirements not met:")
        for error in errors:
            print(f"   • {error}")
        
        if "Bootstrap configuration not found" in str(errors):
            print("\n🚀 Running bootstrap automatically...")
            if run_bootstrap():
                # Re-check requirements
                errors = check_requirements()
                if errors:
                    print("❌ Still have errors after bootstrap:")
                    for error in errors:
                        print(f"   • {error}")
                    return 1
            else:
                return 1
        else:
            return 1
    
    print("✓ All requirements met")
    
    # Run packet test
    cmd = [sys.executable, "-m", "watr.packet_test", command] + sys.argv[2:]
    
    try:
        # Set up environment
        env = os.environ.copy()
        env['PYTHONPATH'] = os.path.join(os.path.dirname(__file__), 'python')
        
        # Run the test
        result = subprocess.run(cmd, cwd=os.path.dirname(__file__), env=env)
        return result.returncode
        
    except KeyboardInterrupt:
        print("\n⚠️  Test interrupted by user")
        return 1
    except Exception as e:
        print(f"❌ Error running test: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())